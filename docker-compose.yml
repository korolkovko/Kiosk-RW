# docker-compose.yml
# Main Docker Compose configuration for KIOSK application

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: kiosk_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: kiosk_db
      POSTGRES_USER: kiosk_user
      POSTGRES_PASSWORD: kiosk_secure_password_2025
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # Using port 5433 to avoid conflict with your existing PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres:/docker-entrypoint-initdb.d
    networks:
      - kiosk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kiosk_user -d kiosk_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: kiosk_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Using port 6380 to avoid conflicts
    volumes:
      - redis_data:/data
    networks:
      - kiosk_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kiosk_backend
    restart: unless-stopped
    environment:
      # Application Settings
      PROJECT_NAME: "KIOSK Application"
      API_V1_STR: "/api/v1"
      ENVIRONMENT: "development"
      DEBUG: "true"
      SECRET_KEY: "kiosk-super-secret-key-change-in-production-2024"
      
      # Database Settings
      DATABASE_URL: "postgresql://kiosk_user:kiosk_secure_password_2025@postgres:5432/kiosk_db"
      
      # Redis Settings
      REDIS_URL: "redis://redis:6379/0"
      
      # Authentication Settings
      JWT_SECRET_KEY: "kiosk-jwt-secret-key-change-in-production-2024"
      JWT_ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "1800"
      
      # File Upload Settings
      MAX_FILE_SIZE: "10485760"
      UPLOAD_PATH: "/app/uploads"
      
      # Logging Settings
      LOG_LEVEL: "INFO"
      LOG_FILE_PATH: "/app/logs/app.log"
      
      # CORS Settings
      ALLOWED_ORIGINS: '["http://localhost", "http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "http://localhost:8001", "http://localhost:8080", "http://localhost:8081", "http://localhost:8082"]'
    ports:
      - "8001:8000"  # Backend on port 8001 to avoid conflicts
    volumes:
      - ./backend:/app  # Mount entire backend code for hot reload
      - ./data/uploads:/app/uploads
      - ./data/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kiosk_network
    # Healthcheck disabled since server runs manually
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3


  # Per-app frontend containers (for production-like testing)
  kiosk-frontend:
    build:
      context: ./frontend/apps/kiosk
      dockerfile: Dockerfile.pnpm
    container_name: kiosk_frontend_kiosk
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - kiosk_network
    profiles:
      - kiosk

  admin-frontend:
    build:
      context: ./frontend/apps/admin
      dockerfile: Dockerfile.pnpm
    container_name: kiosk_frontend_admin
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - kiosk_network
    profiles:
      - admin

  superadmin-frontend:
    build:
      context: ./frontend/apps/super-admin
      dockerfile: Dockerfile.pnpm
    container_name: kiosk_frontend_superadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    depends_on:
      - backend
    networks:
      - kiosk_network
    profiles:
      - superadmin

  # pgAdmin for database management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: kiosk_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@kiosk.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - kiosk_network
    profiles:
      - tools  # Optional service, start with: docker-compose --profile tools up

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  kiosk_network:
    driver: bridge